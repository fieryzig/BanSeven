require 'logic/status'

color_score = {}
color_score.c = 1;
color_score.d = 2;
color_score.h = 3;
color_score.s = 4;

all_cards = {
    'ca','c2','c3','c4','c5','c6','c7','c8','c9','c10','cj','cq','ck',
    'da','d2','d3','d4','d5','d6','d7','d8','d9','d10','dj','dq','dk',
    'ha','h2','h3','h4','h5','h6','h7','h8','h9','h10','hj','hq','hk',
    'sa','s2','s3','s4','s5','s6','s7','s8','s9','s10','sj','sq','sk',
};
card1 = {};
card2 = {};
card3 = {};
card4 = {};

legal = {};
legal.c = {7,7};
legal.d = {7,7};
legal.h = {7,7};
legal.s = {7,7};


swap = function(array, index1, index2)
    array[index1], array[index2] = array[index2], array[index1]
end

shuffle = function(array)
    local n = #array
    while n > 1 do
        local index = math.random(n)
        swap(array, index, n)
        n = n - 1
    end
end

function SortCards(a, b)
    if (string.byte(a,1) ~= string.byte(b,1)) then return string.byte(a,1) < string.byte(b,1) end
    aa = string.char(string.byte(a,2)); bb = string.char(string.byte(b,2));
    if aa == 'a' then return true; end
    if aa >= '1' and aa <= '9' then 
        if bb > 'a' then return true; end
        if bb == '1' then return true; end
        if bb >= '2' and bb <= '9' and aa ~= '1' then
            return aa < bb;
        end
    end
    if aa > 'a' and bb > 'a' then
        if aa == 'j' then return true; end
        if aa == 'q' and bb == 'k' then return true; end
    end
    return false;
end

function Init()
    card1 = {};
    card2 = {};
    card3 = {};
    card4 = {};
    status_turn = 0;
    legal.c = {7,7};
    legal.d = {7,7};
    legal.h = {7,7};
    legal.s = {7,7};
end

function GetID()
    return 0;
end

function GetCards()
    shuffle(all_cards);
    score = 0; card1 = {}
    for i = 1, 13 do 
        table.insert(card1,all_cards[i]);
        color, num = SplitCard(all_cards[i]);
        score = score + color_score[color] * num;
    end
    LuaHelper.SetScore(0,score);

    score = 0;
    for i = 14, 26 do 
        table.insert(card2,all_cards[i]); 
        if all_cards[i] == 's7' then status_turn = 1; end; 
        color, num = SplitCard(all_cards[i]);
        score = score + color_score[color] * num;
    end
    LuaHelper.SetScore(1,score);

    score = 0;
    for i = 27, 39 do 
        table.insert(card3,all_cards[i]); 
        if all_cards[i] == 's7' then status_turn = 2; end; 
        color, num = SplitCard(all_cards[i]);
        score = score + color_score[color] * num;
    end
    LuaHelper.SetScore(2,score);

    score = 0;
    for i = 40, 52 do 
        table.insert(card4,all_cards[i]); 
        if all_cards[i] == 's7' then status_turn = 3; end; 
        color, num = SplitCard(all_cards[i])
        score = score + color_score[color] * num;    
    end
    LuaHelper.SetScore(3,score);

    SortCards = nil;
    table.sort(card1, SortCards);
    table.sort(card2, SortCards);
    table.sort(card3, SortCards);
    table.sort(card4, SortCards);
    return card1;
end

function SplitCard(card)
    color = string.char(string.byte(card, 1));
    tmp = string.char(string.byte(card,2));
    num = 0;
    if (tmp == 'j') then num = 11;
    elseif (tmp == 'q') then num = 12;
    elseif (tmp == 'k') then num = 13;
    elseif (tmp == '1') then num = 10;
    elseif (tmp == 'a') then num = 1;
    else num = tonumber(tmp);
    end
    if num == nil then print(card..' '..color..'!!!!'); end;
    return color, num;
end

function WaitForTurn()
    repeat
        if (status_turn == 1 and card2) then submit,lock = AISubmitCard(card2); end;
        if (status_turn == 2 and card3) then submit,lock = AISubmitCard(card3); end;
        if (status_turn == 3 and card4) then submit,lock = AISubmitCard(card4); end;
        if submit ~= nil then
            color, num =  SplitCard(submit);
            LuaHelper.SubmitCard(submit, color, num, status_turn); 
        elseif lock ~= nil then
            print('Player'..status_turn..' lock:'..lock);
        end;
        next_turn();
    until status_turn == 0;
end

function AISubmitCard(cards)
    need_lock = true;
    submit = nil;
    lock = nil;
    for i = #cards,1,-1 do
        card = cards[i];
        color, num = SplitCard(card);
        updown = legal[color];
        if updown[2] == num then
            updown[2] = updown[2] + 1;
            if (num == 7) then updown[1] = updown[1] - 1; end;
            need_lock = false;
            submit = card;
            table.remove(cards, i)
            break;
        end
        if updown[1] == num then
            updown[1] = updown[1] - 1;
            if (num == 7) then updown[2] = updown[2] + 1; end;
            need_lock = false;
            submit = card;
            table.remove(cards, i)
            break;
        end
    end

    if need_lock then
        minscore = 13 * 5;
        lockid = 0;
        for i = 1, #cards do
            card = cards[i];
            color, num = SplitCard(card)
            score = num * color_score[color];
            if (score < minscore ) then
                minscore = score;
                lock = card;
                lockid = i;
            end
        end
        table.remove(cards, lockid);
    end
    return submit, lock;
end